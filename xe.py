import streamlit as st
import matplotlib.pyplot as plt

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –•–ª–µ–±–Ω—ã—Ö –ï–¥–∏–Ω–∏—Ü",
    page_icon="https://cdn-icons-png.flaticon.com/512/1046/1046784.png",
    layout="centered"
)

# --- PWA HTML –±–ª–æ–∫ ---
st.markdown("""
<link rel="apple-touch-icon" sizes="180x180" href="https://cdn-icons-png.flaticon.com/512/1046/1046784.png">
<link rel="icon" type="image/png" sizes="32x32" href="https://cdn-icons-png.flaticon.com/512/1046/1046784.png">
<link rel="manifest" href="manifest.json">
<meta name="theme-color" content="#ffffff">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<script>
if ("serviceWorker" in navigator) {
  window.addEventListener("load", function() {
    navigator.serviceWorker.register("service-worker.js")
    .then(reg => console.log("Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", reg.scope))
    .catch(err => console.log("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:", err));
  });
}
</script>
""", unsafe_allow_html=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
for key in ["carbs", "protein", "fat", "portions", "history"]:
    if key not in st.session_state:
        st.session_state[key] = 0.0 if key in ["carbs", "protein", "fat"] else 1 if key=="portions" else []

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.title("üçû –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –•–ª–µ–±–Ω—ã—Ö –ï–¥–∏–Ω–∏—Ü (–•–ï)")
st.write("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –•–ï –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å.")

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def reset_fields():
    st.session_state.carbs = 0.0
    st.session_state.protein = 0.0
    st.session_state.fat = 0.0
    st.session_state.portions = 1

def clear_history():
    st.session_state.history = []

# --- –ü–æ–ª—è –≤–≤–æ–¥–∞ —Å –∫–ª—é—á–∞–º–∏ ---
carbs = st.number_input("–£–≥–ª–µ–≤–æ–¥—ã (–≥):", min_value=0.0, step=1.0, key="carbs")
protein = st.number_input("–ë–µ–ª–∫–∏ (–≥):", min_value=0.0, step=1.0, key="protein")
fat = st.number_input("–ñ–∏—Ä—ã (–≥):", min_value=0.0, step=1.0, key="fat")
portions = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:", min_value=1, step=1, key="portions")

# --- –ö–Ω–æ–ø–∫–∏ ---
col1, col2 = st.columns(2)
with col1:
    calculate = st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –•–ï", use_container_width=True, type="primary")
with col2:
    st.button("–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—è", on_click=reset_fields, use_container_width=True)

# --- –†–∞—Å—á—ë—Ç ---
if calculate:
    # --- –ï–¥–∏–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ---
    calories_single = carbs*4 + protein*4 + fat*9
    xe_carbs_single = carbs / 10
    bje_single = (protein*4 + fat*9) / 100  # –ë–ñ–ï —Ç–æ–ª—å–∫–æ –±–µ–ª–∫–∏ –∏ –∂–∏—Ä—ã
    xe_total_single = xe_carbs_single + bje_single

    # --- –û–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π ---
    calories_total = calories_single * portions
    xe_carbs_total = xe_carbs_single * portions
    bje_total = bje_single * portions
    xe_total_total = xe_carbs_total + bje_total

    # --- –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ü–∏—é ---
    calories_per_portion = calories_total / portions
    xe_carbs_per_portion = xe_carbs_total / portions
    bje_per_portion = bje_total / portions
    xe_total_per_portion = xe_total_total / portions

    # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
    st.success(f"‚úÖ –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–¥–ª—è {portions} –ø–æ—Ä—Ü–∏–π):")
    st.metric("–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å", f"{calories_total:.1f} –∫–∫–∞–ª")
    st.metric("–•–ï –ø–æ —É–≥–ª–µ–≤–æ–¥–∞–º", f"{xe_carbs_total:.2f}")
    st.metric("–ë–ñ–ï", f"{bje_total:.2f}")
    st.metric("üí† –û–±—â–∞—è —Å—É–º–º–∞ –•–ï", f"{xe_total_total:.2f}")

    st.info("–ù–∞ –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é:")
    st.write(f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories_per_portion:.1f} –∫–∫–∞–ª")
    st.write(f"–•–ï –ø–æ —É–≥–ª–µ–≤–æ–¥–∞–º: {xe_carbs_per_portion:.2f}")
    st.write(f"–ë–ñ–ï: {bje_per_portion:.2f}")
    st.write(f"üí† –û–±—â–∞—è –•–ï: {xe_total_per_portion:.2f}")

    # --- –ò—Å—Ç–æ—Ä–∏—è ---
    st.session_state.history.append({
        "–£–≥–ª–µ–≤–æ–¥—ã": carbs,
        "–ë–µ–ª–∫–∏": protein,
        "–ñ–∏—Ä—ã": fat,
        "–ü–æ—Ä—Ü–∏–∏": portions,
        "–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–≤—Å–µ–≥–æ)": calories_total,
        "–•–ï –ø–æ —É–≥–ª–µ–≤–æ–¥–∞–º (–≤—Å–µ–≥–æ)": xe_carbs_total,
        "–ë–ñ–ï (–≤—Å–µ–≥–æ)": bje_total,
        "–û–±—â–∞—è –•–ï (–≤—Å–µ–≥–æ)": xe_total_total
    })

    # --- –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ ---
    labels = ['–•–ï –ø–æ —É–≥–ª–µ–≤–æ–¥–∞–º', '–ë–ñ–ï']
    sizes = [xe_total_total, bje_total]
    colors = ['#1E90FF', '#FFA500']  # –•–ï —Å–∏–Ω–∏–π, –ë–ñ–ï –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    explode = (0.05, 0.05)

    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors, explode=explode, shadow=True)
    ax.axis('equal')
    st.pyplot(fig)

# --- –í–∫–ª–∞–¥–∫–∏ ---
tab1, tab2 = st.tabs(["üìò –ö–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ë–ñ–ï?", "üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤"])

with tab1:
    st.markdown("""
    ### üíâ –ö–∞–∫ –∫–æ–º–ø–µ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ë–ñ–ï?
    1 –ë–ñ–ï = 1 –•–ï. –î–æ–∑—É –Ω—É–∂–Ω–æ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å, –ª–∏–±–æ –ø–æ–¥–∫–∞–ª—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ 1‚Äì2‚Äì3 —á–∞—Å–∞ –ø–æ—Å–ª–µ –µ–¥—ã.

    #### ‚è≥ –ö–∞–∫ —Ä–∞—Å—Ç—è–≥–∏–≤–∞—Ç—å:
    ‚Ä¢ 1 –ë–ñ–ï ‚Äî –Ω–∞ 3 —á–∞—Å–∞  
    ‚Ä¢ 2 –ë–ñ–ï ‚Äî –Ω–∞ 4 —á–∞—Å–∞  
    ‚Ä¢ 3 –ë–ñ–ï ‚Äî –Ω–∞ 5 —á–∞—Å–æ–≤  
    ‚Ä¢ –ë–æ–ª–µ–µ 4 –ë–ñ–ï ‚Äî –æ—Ç 5 –¥–æ 10+ —á–∞—Å–æ–≤  

    #### üí° –ï—Å–ª–∏ –≤—ã –Ω–∞ –ø–æ–º–ø–µ:
    –°–ª–æ–∂–∏—Ç–µ –¥–æ–∑—ã –Ω–∞ –•–ï –∏ –ë–ñ–ï, —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –ø–æ–ø–æ–ª–∞–º:  
    ‚Ä¢ 50 % ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –±–æ–ª—é—Å –ø–µ—Ä–µ–¥ –µ–¥–æ–π  
    ‚Ä¢ 50 % ‚Äî —Ä–∞—Å—Ç—è–Ω–∏—Ç–µ –Ω–∞ 4‚Äì5 —á–∞—Å–æ–≤  

    #### üíâ –ï—Å–ª–∏ –≤—ã –Ω–∞ —Ä—É—á–∫–∞—Ö:
    –°–¥–µ–ª–∞–π—Ç–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ:  
    ‚Ä¢ 50 % ‚Äî –ø–æ–¥–∫–æ–ª–∫–∞ –ø–µ—Ä–µ–¥ –µ–¥–æ–π  
    ‚Ä¢ 50 % ‚Äî —á–µ—Ä–µ–∑ 1.5‚Äì3 —á–∞—Å–∞  
    """)

with tab2:
    if st.session_state.history:
        with st.expander("üìú –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤", expanded=False):
            st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", on_click=clear_history, use_container_width=True)
            for i, entry in enumerate(reversed(st.session_state.history[-5:]), 1):
                st.write(f"**–†–∞—Å—á—ë—Ç {i}:**")
                st.write(f"–£–≥–ª–µ–≤–æ–¥—ã: {entry['–£–≥–ª–µ–≤–æ–¥—ã']} –≥, –ë–µ–ª–∫–∏: {entry['–ë–µ–ª–∫–∏']} –≥, –ñ–∏—Ä—ã: {entry['–ñ–∏—Ä—ã']} –≥")
                st.write(f"–ü–æ—Ä—Ü–∏–∏: {entry['–ü–æ—Ä—Ü–∏–∏']}")
                st.write(f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–≤—Å–µ–≥–æ): {entry['–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å (–≤—Å–µ–≥–æ)']:.1f} –∫–∫–∞–ª")
                st.write(f"–•–ï –ø–æ —É–≥–ª–µ–≤–æ–¥–∞–º (–≤—Å–µ–≥–æ): {entry['–•–ï –ø–æ —É–≥–ª–µ–≤–æ–¥–∞–º (–≤—Å–µ–≥–æ)']:.2f}")
                st.write(f"–ë–ñ–ï (–≤—Å–µ–≥–æ): {entry['–ë–ñ–ï (–≤—Å–µ–≥–æ)']:.2f}")
                st.write(f"üí† –û–±—â–∞—è –•–ï (–≤—Å–µ–≥–æ): {entry['–û–±—â–∞—è –•–ï (–≤—Å–µ–≥–æ)']:.2f}")

# --- –ü–æ–¥–ø–∏—Å—å ---
st.markdown("---")
st.caption("üìò –§–æ—Ä–º—É–ª—ã: 10 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤ = 1 –•E | 100 –∫–∫–∞–ª –æ—Ç –±–µ–ª–∫–æ–≤ –∏ –∂–∏—Ä–æ–≤ = 1 –ë–ñ–ï")
st.caption("1 –≥ –±–µ–ª–∫–∞ = 4 –∫–∫–∞–ª | 1 –≥ –∂–∏—Ä–∞ = 9 –∫–∫–∞–ª")